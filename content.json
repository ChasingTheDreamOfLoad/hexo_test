{"meta":{"title":"wanghao'Blog","subtitle":"","description":"","author":"wanghao","url":"http://blog.hyaline.top","root":"/"},"pages":[{"title":"关于","date":"2021-10-30T02:39:39.728Z","updated":"2021-10-30T02:39:39.728Z","comments":false,"path":"about/index.html","permalink":"http://blog.hyaline.top/about/index.html","excerpt":"","text":"个人详细介绍比较懒，还没写完 个人信息 性 别：男&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;年 龄：22 邮 箱：&#x31;&#x30;&#x39;&#55;&#x36;&#49;&#x31;&#57;&#56;&#57;&#64;&#x71;&#113;&#46;&#99;&#x6f;&#109;&emsp;&emsp;&emsp;专 业：电气工程及其自动化 &emsp;&emsp; 工作及教育经历 燕山大学&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;2021.9~至今&emsp;&emsp;&emsp;&emsp; 电子信息-研究生 大疆创新科技有限公司&emsp;&emsp;&emsp; &ensp;2020.4~2020.8&emsp;&emsp;&emsp;&emsp;&emsp; robomaster部（实习） 应急管理大学（筹）&emsp;&emsp;&emsp;&emsp;&emsp;2017.9~2021.7&emsp;&emsp;&emsp;&emsp; 电气工程及其自动化 专业技能 熟练使用C， C++，python，掌握Go，了解 JavaScript、PHP 等编程语言 掌握solidworks ，Altium Designer软件的使用 熟悉ROS,掌握TCP/IP协议原理及使用 掌握opencv的使用 项目经历获奖经历 校一等奖学金 学院优秀毕业生 河北省电子产品设计大赛三等奖 Robomaster 三等奖 世界机器人大赛技术挑战赛冠军 个人账号 blog 地址 (附加自己博客特色，写了哪些技术文章) github 地址 (附加自己github特色，突出的项目) 其他信息 喜欢钻研技术"},{"title":"分类","date":"2021-08-03T12:09:25.951Z","updated":"2021-08-03T12:09:25.951Z","comments":false,"path":"categories/index.html","permalink":"http://blog.hyaline.top/categories/index.html","excerpt":"","text":""},{"title":"hhh","date":"2021-08-02T16:41:25.000Z","updated":"2021-08-04T02:19:49.703Z","comments":true,"path":"hhh/index.html","permalink":"http://blog.hyaline.top/hhh/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-08-09T17:25:19.977Z","updated":"2021-08-09T17:25:19.977Z","comments":true,"path":"links/index.html","permalink":"http://blog.hyaline.top/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-08-03T12:09:25.953Z","updated":"2021-08-03T12:09:25.953Z","comments":false,"path":"tags/index.html","permalink":"http://blog.hyaline.top/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-08-03T12:09:25.952Z","updated":"2021-08-03T12:09:25.952Z","comments":false,"path":"repository/index.html","permalink":"http://blog.hyaline.top/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"各种协议","slug":"各种协议","date":"2021-10-28T09:53:37.000Z","updated":"2021-10-29T11:40:58.627Z","comments":true,"path":"2021/10/28/各种协议/","link":"","permalink":"http://blog.hyaline.top/2021/10/28/%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"需要用到的协议ModBus、OPC、CAN、Profibus、ZigBee、Wifi、MQTT、COAP 分类基于以太网的： OPC，ZigBee，Wifi，MQTT，CoAP 独立的： can modbus（485，232，422，以太网） Profibus（485，光纤，MBP） opchttps://github.com/OPCFoundation/UA-.NETStandard/blob/master/Docs/PubSub.md ZigBeeMQTT和COAPemqx NanoMQ The Constrained Application Protocol（CoAP） MQTT： TCP 长链接， CoAP： UDP 低功耗短连接 Playload 来自IP协议 CanModbusmodbus指的是MODICON公司为该公司生产的PLC设计的一种通信协议，从其功能上看，可以认为是一种现场总线。modbus常用于工业环境中，是客户端/服务器协议 modbus 可以用在多种类型的网络和总线上（RS-485，RS-232，RS-422，以太网），下图展示了一个例子 注：RS-485, also known as TIA-485(-A) or EIA-485 名词缩写 ADU -&gt;Application Data Unit HDLC -&gt; High level Data Link Control HMI -&gt; Human Machine Interface IETF -&gt; Internet Engineering Task Force -&gt; I/O Input/Output IP -&gt; Internet Protocol MAC -&gt; Media Access Control MB -&gt; MODBUS Protocol PDU -&gt; protocol data unit Protocol versionshttps://en.wikipedia.org/wiki/Modbus modbus的变种很多 Modbus RTU (Remote Terminal Unit)—————————- RS-485 Modbus ASCII—————————- RS-485 Modbus TCP/IP or Modbus TCP—————————- Modbus over TCP/IP or Modbus over TCP or Modbus RTU/IP Modbus over UDP Modbus Plus (Modbus+, MB+ or MBP)—————————- RS-485 Pemex Modbus Enron Modbus 其中需要常用到的是 Modbus RTU (Remote Terminal Unit) Modbus ASCII Modbus TCP 在 Modbus 上进行通信（即传输数据）的每个设备都被赋予一个唯一的地址。 http://www.pices-journal.com/downloads/V2I4-PICES0022.pdf http://ir.lib.ksu.edu.tw/retrieve/43333/R0001+%E8%AB%96%E6%96%87%E6%9C%AC%E6%96%87.pdf Modbus RTU frame format Name Length (bits) Function Start 28 At least 3½ character times of silence (mark condition)???? Address 8 Station address 唯一 Function 8 表示功能码 Data n × 8 Data + length will be filled depending on the message type CRC 16 CRC-16校验 End 28 ADU = Address + PDU + Error check, PDU = Function code + Data. A Modbus “frame” consists of an Application Data Unit (ADU), which encapsulates a Protocol Data Unit (PDU) Modbus ASCII frame format Name Length (bits) Function Start 28 (0x3A)代表: Address 8 Station address 唯一 Function 8 表示功能码 Data n × 8 Data + length will be filled depending on the message type LRC 16 Checksum End 2 (0x0D,0x0A)代表CR/LF 注：LRC 计算为 8 位值的总和（不包括开始和结束字符），取反（二进制补码）并编码为 8 位值。 Modbus TCP frame format Name Length (bits) Function Start 28 (0x3A)代表: Address 8 Station address 唯一 Function 8 表示功能码 Data n × 8 Data + length will be filled depending on the message type LRC 16 Checksum End 2 (0x0D,0x0A)代表CR/LF 资料参考 http://www.zxpmq.com/y-378.html（） Modbus_Application_Protocol_V1_1b3 Profibus（PROcess FIeld BUS）PROFIBUS在物理层有三种实现方式：EIA-485（即RS-485），光纤，MBP。 其包含三个标准： PROFIBUS－PA（Process Automation ） PROFIBUS – DP（Decentralized Periphery） PROFIBUS-FMS（Fieldbus Message Specification） 性能 传输速率 最大传输距离 9.6K～12Mbps 随传输速率变化 最大传输距离在9.6K187.5Kbps时为1000m，500Kbps时为400m，1500Kbps时为200m，3000K12000Kbps时为100m，可用中继器延长至10km 常见数据速率（波特）：12M、6M、3M、1.5M、500k、187.5k、93.75k、19.2k、9.6k 其他工业以太网协议 EtherCAT, Profinet and multiprotocols. https://e2e.ti.com/blogs_/b/industrial_strength/posts/a-history-of-industrial-ethernet-protocols-and-their-benefits","categories":[],"tags":[]},{"title":"数电回顾","slug":"数电回顾","date":"2021-10-20T08:49:43.000Z","updated":"2021-10-20T12:53:29.730Z","comments":true,"path":"2021/10/20/数电回顾/","link":"","permalink":"http://blog.hyaline.top/2021/10/20/%E6%95%B0%E7%94%B5%E5%9B%9E%E9%A1%BE/","excerpt":"","text":"K-Map 卡诺图卡诺圈数目应该尽可能少，卡诺圈应尽可能大 卡诺图中的d，代表任意值 out = (a)|(~b&amp;c); 名词区我们还需要对复位信号展宽 Cordic技术： 用于计算初等函数的一种迭代方法","categories":[],"tags":[{"name":"k-Map(卡诺图)","slug":"k-Map-卡诺图","permalink":"http://blog.hyaline.top/tags/k-Map-%E5%8D%A1%E8%AF%BA%E5%9B%BE/"}]},{"title":"Embedded Linux","slug":"Embedded-Linux","date":"2021-10-20T07:35:10.000Z","updated":"2021-10-20T08:45:41.989Z","comments":true,"path":"2021/10/20/Embedded-Linux/","link":"","permalink":"http://blog.hyaline.top/2021/10/20/Embedded-Linux/","excerpt":"","text":"K-Map 卡诺图卡诺圈数目应该尽可能少，卡诺圈应尽可能大 卡诺图中的d，代表任意值 out = (a)|(~b&amp;c);","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.hyaline.top/tags/linux/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://blog.hyaline.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"}]},{"title":"SPI的verilog实现","slug":"SPI的verilog实现","date":"2021-10-19T08:18:42.000Z","updated":"2021-10-21T07:20:23.513Z","comments":true,"path":"2021/10/19/SPI的verilog实现/","link":"","permalink":"http://blog.hyaline.top/2021/10/19/SPI%E7%9A%84verilog%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"SPI的种类 标准SPI： 标准SPI通常就称SPI，它是一种串行外设接口规范，有4根引脚信号：clk , cs, mosi, miso2. ## Dual SPI： 它只是针对SPI Flash而言，不是针对所有SPI外设。对于SPI Flash，全双工并不常用，因此扩展了mosi和miso的用法，让它们工作在半双工，用以加倍数据传输。也就是对于Dual SPI Flash，可以发送一个命令字节进入dual mode，这样mosi变成SIO0（serial io 0），mosi变成SIO1（serial io 1）,这样一个时钟周期内就能传输2个bit数据，加倍了数据传输3. ## Qual SPI： 与Dual SPI类似，也是针对SPI Flash，Qual SPI Flash增加了两根I/O线（SIO2,SIO3），目的是一个时钟内传输4个bit。所以对于SPI Flash，有标准spi flash，dual spi , qual spi 三种类型，分别对应3-wire, 4-wire, 6-wire，在相同clock下，线数越多，传输速率越高。 标准SPI的实现","categories":[],"tags":[]},{"title":"系统安装","slug":"系统安装","date":"2021-10-16T13:17:50.000Z","updated":"2021-10-16T14:04:07.453Z","comments":true,"path":"2021/10/16/系统安装/","link":"","permalink":"http://blog.hyaline.top/2021/10/16/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","excerpt":"","text":"电脑的启动过程当你按下电源开机键之后，主板开始供电，在检查CPU和内存无错误之后，就要根据用户在主板BIOS中的设置，开始寻找并启动硬盘中的系统。而主板寻找并启动硬盘系统的方式有两种，就是 传统模式（Legacy）和 UEFI模式 通常情况下，这两种启动方式和硬盘的两种分区模式MBR和GPT相对应 传统模式（Legacy） 和 MBR格式的硬盘 相对应 UEFI模式 和 GPT格式硬盘 相对应 所以，你不可能让一块硬盘既 支持 Legacy 又 支持 UEFI 什么是EFI系统分区？ - 知乎 (zhihu.com) 分区格式EFI 分区 是 FAT32格式的 Linux /或/home使用 ext4分区 swaphttps://blog.csdn.net/weixin_34203832/article/details/85810215?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link swap 推荐大小4G以内的物理内存，SWAP 设置为内存的2倍。 4-8G的物理内存，SWAP 等于内存大小。 8-64G 的物理内存，SWAP 设置为8G。 64-256G物理内存，SWAP 设置为16G。 swap的作用首先，当物理内存不足以支撑系统和应用程序（进程）的运作时，这个Swap交换分区可以用作临时存放使用率不高的内存分页，把腾出的内存交给急需的应用程序（进程）使用。有点类似机房的UPS系统，虽然正常情况下不需要使用，但是异常情况下， Swap交换分区还是会发挥其关键作用。 其次，即使你的服务器拥有足够多的物理内存，也有一些程序会在它们初始化时残留的极少再用到的内存分页内容转移到 swap 空间，以此让出物理内存空间。对于有发生内存泄漏几率的应用程序（进程），Swap交换分区更是重要，因为谁也不想看到由于物理内存不足导致系统崩溃。 最后，现在很多个人用户在使用Linux，有些甚至是PC的虚拟机上跑Linux系统，此时可能常用到休眠（Hibernate），这种情况下也是推荐划分Swap交换分区的。 其实少量使用Swap交换空间是不会影响性能，只有当RAM资源出现瓶颈或者内存泄露，进程异常时导致频繁、大量使用交换分区才会导致严重性能问题。另外使用Swap交换分区频繁，还会引起kswapd0进程（虚拟内存管理中, 负责换页的）耗用大量CPU资源，导致CPU飙升。","categories":[],"tags":[]},{"title":"学习资料总结","slug":"学习资料总结","date":"2021-10-15T09:48:31.000Z","updated":"2021-10-20T13:21:47.879Z","comments":true,"path":"2021/10/15/学习资料总结/","link":"","permalink":"http://blog.hyaline.top/2021/10/15/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%80%BB%E7%BB%93/","excerpt":"","text":"图书下载网站Z-Library. The world’s largest ebook library. MLhttps://www.zhihu.com/question/59843705 keyword ： convex optimization cs229https://www.youtube.com/watch?v=4b4MUYve_U8&amp;list=RDLVjGwO_UgTS7I&amp;index=2 中文讲义：https://kivy-cn.github.io/Stanford-CS-229-CN/#/Markdown/cs229-notes1 FPGA（来自老石谈芯） FPGA设计 实战演练（高级技巧篇） Clifford Cummings关于数字电路设计的文章在此：http://www.sunburst-design.com/papers/西南交大邸志雄老师的静态时序分析STA课程（友情推荐非广告）：http://www.dizhixiong.cn/class2/","categories":[],"tags":[]},{"title":"make学习心得","slug":"make学习心得","date":"2021-10-13T09:28:55.000Z","updated":"2021-10-18T14:05:02.174Z","comments":true,"path":"2021/10/13/make学习心得/","link":"","permalink":"http://blog.hyaline.top/2021/10/13/make%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/","excerpt":"","text":"make是什么认识make最开始是因为编译C，所以很显然的认识make是方便编译C的，但是实际学习的时候发现其实make只是一种脚本语言以下面为例（注释解释了每句话的含义） 12345result.txt: source.txt # 目标文件result.txt 依赖于source.txt cp source.txt result.txt # 一个简单的shell命令source.txt:# 目标文件 source.txt 无依赖项 echo &quot;this is the source&quot;&gt; source.txt # 一个简单的shell命令 # 由于目标result.txt 依赖于 source.txt 因此会先执行目标source.txt 这里和C没有任何关系 一般而言，source（目标文件是一个 文件或文件夹），如果不想这样也可以使用 .PHONY 去声明伪目标 123.PHONY: cleanclean: rm *.o temp 基础教程 http://www.ruanyifeng.com/blog/2015/02/make.html 细节 $(MAKE) 指向当前使用的Make工具 $@指代当前目标，就是Make命令当前构建的那个目标。比如，make foo的 $@ 就指代foo。但这样表达不全面，这里有一个事例 123456SUBDIRS = fpgaall:$(SUBDIRS) echo $@ #这里会输出all$(SUBDIRS): echo $@ #这里会输出fpga $(MAKECMDGOALS) 包含了输入make 命令后的参数 如，make foo foo1 的$(MAKECMDGOALS) 就是 foo foo1 ?= 类似于C中的弱定义","categories":[],"tags":[]},{"title":"verilog-ethernet 学习心得","slug":"verilog-ethernet-学习心得","date":"2021-10-07T11:08:55.000Z","updated":"2021-10-20T07:35:16.830Z","comments":true,"path":"2021/10/07/verilog-ethernet-学习心得/","link":"","permalink":"http://blog.hyaline.top/2021/10/07/verilog-ethernet-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/","excerpt":"","text":"未翻译的英文都有特殊原因，不适合翻译，可以搜索具体含义 知乎教程https://www.zhihu.com/column/c_1346501991867199488 错误纠正 最近在做以太网方面的开发工作，在Github中发现一个优秀的Verilog以太网项目，670+ star，整个项目实现了UDP协议栈，代码质量很高，且独立实现了axis fifio等基本功能模块，每一个模块都有独立的仿真文件，仿真采用cocotb和myhdl平台，使用python来编写测试文件， 使用iverilog来进行编译，用gtkwave来查看波形，值得阅读与学习，项目链接如下： 这里提到的 fifio 指的是 fifo，axis 可能指的是axi-stream 在wiki上看到 AMBA AXI4, AXI4-Lite and AXI4-Stream have been adopted by Xilinx and many of its partners as main communication buses in their products. AMBA AXI4、AXI4-Lite 和 AXI4-Stream 已被Xilinx及其许多合作伙伴用作其产品中的主要通信总线 此外 程序中的注释印证了这一点 ​ 我们要做什么？在第四篇提到 其实这个项目实现了从 phy-&gt;mac-&gt;ip-&gt;udp 的全过程， 源码https://github.com/alexforencich/verilog-ethernet .vpi文件是什么在 Icarus Verilog 中，任务在myhdl.vpi从 C 源代码编译的模块中定义，图片是关于cocotb的 如何理解DUT（device under test）其实就是待测设备，在此指的应该是用的FPGA芯片 What is tox?tox is a generic virtualenv management and test command line too 什么是 phy？port pyhscial layer 在7层osi模型中，phy芯片位于第一层（物理层） 在这个工程中中的PHY是一个芯片 什么是MAC？在7层osi模型中，MAC芯片位于第二层（数据链路层） mii mac phy 相关字眼出现在开源项目中 在项目中的 tcl 是什么用在项目中有一个 syn 文件夹 里面包含了很多tcl文件，有什么用呢？ tcl简介 https://zhuanlan.zhihu.com/p/35911911 文件初看(单词记录)Arbiter 仲裁器 arbitrated asynchronous 异步 crosspoint ？ Linear feedback shift register，LFSR 对例程的理解知乎第四篇教程里提到，例程工程分为四个部分（如下图）， 对应情况如下，在示例工程的rtl目录里有四个文件 分别是 其用处对应 debounce_switch –&gt; 消抖 fpga –&gt; TOP文件 fpga_core –&gt; fpga_core sync_signal –&gt; 仅用于 将usart异步信号转换为同步信号 除此之外， sync_reset –&gt; 复位（在主目录的 rtl-&gt;axis-&gt;sync_reset.v） 但是并没有看到pll部分 例程（example）的结构图（Graphviz） 其中底层的算法有 lfsr priority_encoder axis_fifo/axis_async_fifo_adpter（同步异步fifo） eth_axis_rx/tx没有再调用任何的module，逻辑应该是比较直接的 同理 arp_eth_rx/tx , ip_eth_rx/tx , udp_ip_rx/tx (这里第一个单词来自于上一级)，应该也是如此 同时看到了新的名词 ssio sdr 什么是以太网（Ethernet）https://www.zhihu.com/question/340708676/answer/789850020 参考以上链接，以太网，注意（Ethernet!= internet） 以太网代替了原来存在的 Ethernet Frame https://zhuanlan.zhihu.com/p/21318925 事实上真正用起来的不是OSI而是TCP/IP Octet 是什么？Octet 总是表达8个bit （就像他名字所说的），当我们在谈论网络上的问题时，更喜欢使用这个词而不是Byte。 Byte 通常情况下也表示8个bit，但是准确的说，Byte表示的是CPU可以独立的寻址的最小内存单位（不过通过移位和逻辑运算，CPU也可以寻址到某一个单独的bit）。曾几何时，有些电脑的寻址单位不是8Bit的。而现在，大多数情况下byte可以和octet等价但是如果你想要强调准确的8bit时，你就应该使用octet而不是byte。 另外，还有一个量词 nibble用来形容一个字节的一半 （通常是4bit）不过这个词基本上没人用就是了。 工程中的Makefile工程中的Makefile分布在一下几个地方 ./lib/axis/tb 的各个子文件夹 ./example/*/tb/fpga_core 中 ./example/*/Makefile ./example/*/fpga/Makefile 前两个地方的Makefile 都和[ cocotb](Quickstart Guide — cocotb 1.6.0.dev0+gec99a877.d20210503 documentation) 有关 ,其中的常见关键词 TOPLEVEL TOPLEVEL_LANG VERILOG_SOURCES VHDL_SOURCES DUT MODULE …… 均为cocotb规定（make 本身只是一个智能的批处理工具，本身并没有编译和链接的功能） 第三个地方的Makfile 很普通，就是在调其他Makefile而已 第四个地方的Makefile 使用了vivado toolchains,其最后一句是 1vivado -nojournal -nolog -mode batch -source flash.tcl 可以参考一下资料看这句话的意思 https://www.xilinx.com/support/documentation/sw_manuals/xilinx2016_2/ug975-vivado-quick-reference.pdf example工程结构（以Arty为例） commonfpga -Makefile————-&gt;用于生成vivado工程librtltbfpga.xdc—————–&gt;引脚约束,时序约束Makefile—————–&gt;README.md IEEE 802.3IEEE 802.3 is a working group and a collection of Institute of Electrical and Electronics Engineers (IEEE) standards produced by the working group defining the physical layer and data link layer‘s media access control (MAC) of wired Ethernet. This is generally a local area network(LAN) technology with some wide area network (WAN) applications. Physical connections are made between nodes and/or infrastructure devices (hubs, switches, routers) by various types of copper or fiber cable. keywords:define the physical layer and data link layer IEEE 802 官方文档 https://www.ieee802.org/ec-17-0117-00-00EC-newcomer-tutorial.pdf phy讲解 以太网PHY讲解（可以不看布线部分） https://zhuanlan.zhihu.com/p/102296622 万兆网讲解 https://zhuanlan.zhihu.com/p/336618495 千兆网讲解 https://zhuanlan.zhihu.com/p/359970920 外围硬件 存在两种可能 一种是单Phy芯片，另一种是含mac的芯片,此项目中的fpga板子都是带phy，项目中实现了mac等其他功能 https://blog.csdn.net/weixin_44890250/article/details/109187035 https://blog.csdn.net/weixin_35671171/article/details/113023671 https://blog.csdn.net/liufei191010/article/details/81287010 AXIAXI的官方介绍https://community.arm.com/developer/ip-products/system/b/soc-design-blog/posts/introduction-to-axi-protocol-understanding-the-axi-interface 作为对比 计算机网络书里介绍的还是比较详细的，这里提供一本 链接：https://pan.baidu.com/s/1R_yQUwalqPO8eTMhVKVbew提取码：axu3 什么是网关？ 加密RSA是非对称密码算法。非对称密码算法很少用于加密，一般用于对身份进行识别和认证，即使用于加密，也是用于对会话密钥进行加密而很少对文件或信息直接加密。 Md5和SHA系列是哈希函数。哈希函数不用于对文件或信息加密的，而是用于对传输信息进行完整性校验。 加密算法分类 对称加密 非对称加密 数据完整性算法 认证协议 密码学与网络安全 Verilog Tips运算符优先级(IEEE Verilog 2005) Ubuntu 端原始方式实现非集成化的verilog运行环境cocotb,icarus verilog,pytest 工具 用途 cocotb a Python-based digital logic verification framework icarus verilog Verilog 仿真 pytest 比如assert myhdl Design hardware with Python Jinja2 一个模板库，调里面的Template用于生成.v文件 https://indico.cern.ch/event/776422/attachments/1769690/2874927/cocotb_talk.pdf","categories":[{"name":"FPGA","slug":"FPGA","permalink":"http://blog.hyaline.top/categories/FPGA/"}],"tags":[]},{"title":"好用的软件","slug":"好用的软件","date":"2021-10-06T07:07:42.000Z","updated":"2021-10-30T02:21:44.702Z","comments":true,"path":"2021/10/06/好用的软件/","link":"","permalink":"http://blog.hyaline.top/2021/10/06/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/","excerpt":"","text":"解压缩7z（优点，小）band zip(好多人用) 本地视频播放器mpv Adobe软件正常在官网下载即可 官网网站 adobegenp,adobe 全系破解，破解教程 Coding快乐上网见happy-up-net","categories":[],"tags":[]},{"title":"Vmware 虚拟机使用心得","slug":"Vmware-虚拟机使用心得","date":"2021-10-06T03:03:42.000Z","updated":"2021-10-09T08:33:47.958Z","comments":true,"path":"2021/10/06/Vmware-虚拟机使用心得/","link":"","permalink":"http://blog.hyaline.top/2021/10/06/Vmware-%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/","excerpt":"","text":"VMware 踩坑目录[TOC] retrieving file（之后贴图）retrieving file 特别慢 点skip跳过，这是因为他在联网下载，需要翻墙，翻墙需要在安装镜像完成后配置，所以网速奇慢 open vm toolsVMware默认会自动安装，但是安装奇慢 解决方案的话很容易搜到，这里贴一个博主的 主要内容是这三行 重新按上面方法搞了一遍连后面的open-vm-tools都安装完了，这里还停在这个界面，简直垃圾中的垃圾 手动安装open-vmtools 12345sudo apt updatesudo apt install open-vm-toolssudo apt install open-vm-tools-dkms #实现文件夹共享sudo apt install open-vm-tools-desktop #以支持双向拖放文件sudo reboot 虚拟机翻墙（主机已经翻墙的情况下）虚拟机翻墙，常见翻墙方式有VPN和shadowsocks~~ 如果你的翻墙方式是shadowsocks 在宿主机windows上运行shadowsocks.exe并勾选“允许局域网连接”（ALLOW LAN ， LAN就是局域网的意思） 使用桥接方式运行虚拟机（这时虚拟机与宿主处于同一个局域网）进入linux系统，System Settings – Network – Network proxy勾选Manual（手动）,地址全部填宿主机IP（局域网网段），设置好代理端口（可在windows下的shadowsocks查看，一般为默认1080） linux 用浏览器访问www.google.com，成功 shell 翻墙方法一：（推荐使用） 为什么说这个方法推荐使用呢？因为他只作用于当前终端中，不会影响环境，而且命令比较简单在终端中直接运行： 1export http_proxy=http://proxyAddress:port ip地址可以通过 在cmd中输入ipconfig得到，我是wifi连的网 如果你是SSR,并且走的http的代理端口是12333，想执行wget或者curl来下载国外的东西，可以使用如下命令： 1export http_proxy=http://192.168.0.101:12333 如果是https那么就经过如下命令： 1export https_proxy=http://192.168.0.101:12333 除此之外的方法请参考https://zhuanlan.zhihu.com/p/46973701","categories":[],"tags":[]},{"title":"在生龙使用","slug":"在生龙使用","date":"2021-09-26T08:45:27.000Z","updated":"2021-09-26T11:39:14.260Z","comments":true,"path":"2021/09/26/在生龙使用/","link":"","permalink":"http://blog.hyaline.top/2021/09/26/%E5%9C%A8%E7%94%9F%E9%BE%99%E4%BD%BF%E7%94%A8/","excerpt":"","text":"“为什么你的代码跑不了？” 这是个好问题，配置环境是一件非常有趣(令人讨厌)的事情，尤其对于任务重心不在配置环境的人而言，更应该把有限的时间和精力用在项目核心进度上。下面推荐一款 再生龙 软件，能让你的U盘作为打包好的系统盘，实现快速备份、还原和部署整个系统环境。不仅支持本机不同分区、A机器到B机器，还支持虚拟机与虚拟机，虚拟机与实体机的交互。 为什么要用再生龙我们在使用linux经常会有多机部署环境、系统环境崩溃后的快速还原等需求 RoboMaster比赛中，机器人搭载运算设备完成特定功能，常存在硬件相同，代码环境相同的设备，若其中一个系统崩溃，我难道需要对故障设备重装一下所有的东西吗？尤其是配置环境，不说难易程度，这确实是一个很费精力的事情。我如果提前将这些环境进行打包，需要的时候直接解压部署到设备，那不就方便多了吗？ 当然在这里也推荐大家学一学Docker等这类容器基本的服务。 如果要说针对系统级的复刻，使用 再生龙 是一种粗暴简单的方法。 通过再生龙，我们可以将已经配好环境的系统备份至移动硬盘中，需要时直接将已存镜像还原至指定PC中，十分方便，即通过提前制作好的系统盘快速还原到其他设备上。 本文以比赛常见的 英特尔NUC 为例，其他 X86 架构电脑都差不多。 型号：Intel NUCi8 豆子峡谷内存：8G硬盘：128G系统：Ubuntu 16.04 需求：把这台设备的Ubuntu16.04系统复刻到另一台设备上。 完整的需求应该这样说：把这台设备的Ubuntu16.04系统所在的分区复刻到另一台设备上,并做为其启动分区。 如何使用？一、开始前的准备1.确定好自己的需求（如果涉及到跨设备迁移，则考虑硬件设备的兼容性，一般建议配置相近或向下兼容，不推荐从高配置设备迁移到低配置设备上）。 一个U盘，用于制作启动盘一个移动硬盘，用于存储镜像下载启动盘制作软件（例如refus，http://rufus.ie/)二、再生龙启动盘制作首先 下载再生龙镜像 用迅雷会快点完成后打开软件（以rufus为例），制作启动盘。设备选择可参考下图，开始后提示缺少什么，点 是 下载就好下面就是读条等待启动盘制作完成 三、关闭Secure Boot将硬盘插入需要备份的电脑 注意需要关闭 Secure Boot ，NUC一般按F2进入BIOS，进行如图的操作 四、再生龙备份1、启动电脑前插入启动盘 出现NUC画面时迅速狂按F10，直到看到如下画面，选择插入的U盘，（图中U盘是aigo 的），并回车 不久后应进入如下界面，可能需要等待一段时间 2、选择语言3、选择键盘输入 4、选择再生龙 5、选择功能 6、选择模式 7、等待硬盘接入 回车，等待硬盘插入，插入后自动检测到硬盘会出现以下界面Ctrl+C 退出，等待 8、选择外接硬盘 9、选择检测模式选择默认的就行 10、选择仓库存放的目录通过左右键选择目录，选Done结束Enter以再次确认 11、选择向导模式选初学模式即可 12、选择模式如果是第一次配置，需要存储插入的硬盘为镜像文件 TODO 后面部分暂时空着，但是和恢复步骤很像，可以参考 完成后选择关机，等待7s左右，直至完全关机 五、再生龙恢复首先将启动盘插入需要还原的电脑1、重复以上流程，直到功能选择 选择 硬盘/分区复制到硬盘/分区(下面两图配合着看) 2、选择要还原的镜像1、回车确认2、回车确认 3、选不检查，回车4、回车 5、选择后界面左下角出现以下画面，回车 6、按照提示输入 y 7、按照提示输入 y 8、之后就是以下等待界面，大概需要几分钟 9、结束后出现以下界面，回车继续 10、完成所有步骤，选择下一步 确认后等待倒计时7秒，自动关机 最后的结果就是我在一台新的PC上部署了完整的环境，虽然备份源镜像花的时间长一点，但是部署还原到主机非常快，几分钟就搞定了。只需备份一次，镜像始终在U盘里，可以随时部署还原。 注意事项一些要注意的点“最好两台机器的硬件配置相同或相近，向下兼容” 如果还原时出现以下错误，则考虑被还原的机器配置比备份机器低，比如硬盘大小啥的 同样的，对于多系统，可以通过BIOS去设置默认启动分区，同样也可以使用再生龙去实现。 再生龙的功能还是很丰富的，耐心一点去看选项的含义，还是可以容易领会的。根据里面的具体选项去完成指定的任务。当然，建议一切尝试的前提是做好系统数据的备份。","categories":[{"name":"好用的工具","slug":"好用的工具","permalink":"http://blog.hyaline.top/categories/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"备份","slug":"备份","permalink":"http://blog.hyaline.top/tags/%E5%A4%87%E4%BB%BD/"},{"name":"再生龙","slug":"再生龙","permalink":"http://blog.hyaline.top/tags/%E5%86%8D%E7%94%9F%E9%BE%99/"}]},{"title":"python基础环境配置","slug":"python基础环境配置","date":"2021-09-26T03:06:52.000Z","updated":"2021-10-29T12:06:56.754Z","comments":true,"path":"2021/09/26/python基础环境配置/","link":"","permalink":"http://blog.hyaline.top/2021/09/26/python%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","excerpt":"","text":"目录[TOC] 软件下载去官网下载即可 pycharm pycharm 的 社区版 免费，专业版收费，但是通过教育邮箱可以免费使用专业版，地址为 https://www.jetbrains.com/pycharm/download/#section=windows anaconda /miniconda管理python环境的，可以让你在多个python环境间自由切换,miniconda是anaconda的最小版本,二选一安装即可 地址为 anaconda miniconda pycharm +conda配置 开始前请确认自己已经安装了 pycharm +anaconda 首先在桌面创建一个文件夹“conda test”，进入这个文件夹，右键点击open floder as py……. 即可打开pycharm ，若不习惯英文，可先汉化 pycharm （右键+点此跳转至汉化） 首先在pycharm中打开终端(其实cmd 或者 power shell 也行，只要能输命令行) 在终端中输入 conda create -n py3.6 python=3.6 （大致含义为 conda 创建 环境 名称“py3.6” Python版本=3.6，具体含义可通过conda create -h 查看）回车 等待如图所示界面，输入 y 回车，并等待下载完成 结束后出现如下图所示界面，#部分写了，要进入这个环境 conda activate py3.6 ，要退出一个环境用 conda deactivate 使用 conda activate py3.6进入刚刚创建的环境，若看到如图中所示的（py3.6）字样(若看不到，甚至根本没有前面的括号，看看这个https://www.cnblogs.com/yuanyuan2017/p/9969385.html) 测试安装numpy 若下载速度过慢，可更换国内源，右键+点此跳转至pip换源 现在正式开始pycharm的配置，如下图所示进入设置 如下图所示，找到下图所示界面，此时并没有python解释器可以用 点击下图所示界面 -&gt;添加 选择conda环境-&gt;现有环境，现在看到如下图所示界面，寻找刚刚创建的环境需要一些时间 当寻找到环境后可看到如下图所示界面，（路径可能略有不同）点击确定 再次确定，即可回到主界面 pycharm 汉化1.部分来自网络，在pycharm中点击file-&gt;settings，得到如下所示画面，按图中步骤操作（不要第5步） 安装完成后如下图所示 restart 即可 效果如下所示 pip换源由于墙的原因，pip下载速度奇慢，可以换用国内镜像源如下，当然除此之外你也可以通过翻墙解决，如果你已经翻了墙，但是pip还是很慢请点此 linux:修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下： 12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple windows:直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，在pip 目录下新建文件pip.ini，内容如下（注意：不要新建成pip.ini.txt） 1234[global]timeout = 6000index-url = https://pypi.tuna.tsinghua.edu.cn/simpletrusted-host = pypi.tuna.tsinghua.edu.cn conda 常用语法安装完anaconda后就可以使用conda的命令了，anaconda在windows下有图形化界面，但是没人用。 1234567891011#创建环境 这里environment-name是指环境的名字，#例如可以写py36,tensorflow,甚至1234,python-vision是指python的版本例如 3.6 3.7 3.8 等等#例如:conda create -n 1234 python= 3.6,这里表示的涵义是创建一个名为1234的python环境版本是3.6conda create -n environment-name python= python-vision#进入环境 这里environment-name是指已创建好并且打算进入的环境的名字conda activate environment-name#退出环境conda deactivate#查看已有环境conda info -e requirements.txt 的使用很多 Python 项目中经常会包含一个 requirements.txt 文件，里面内容是项目的依赖包及其对应版本号的信息列表，即项目依赖关系清单，其作用是用来重新构建项目所需要的运行环境依赖。 他的作用不仅仅是看而已，通过简单的命令即可以 直接完成requirements 所需环境的安装。 当然requirements生成也是一步完成的。 需要注意requirements生成是列出当前环境所有的依赖。最好在虚拟环境用 1234# requirements.txt 生成pip freeze &gt; requirements.txt# requirements.txt 的安装/使用pip install -r requirements.txt 若出现 123456WARNING: Could not generate requirement for distribution -ip 21.0.1 (d:\\new_software\\anaconda3\\envs\\py38\\lib\\site-packages): Parse error at &quot;&#x27;-ip==21.&#x27;&quot;: Expected W:(abcd...) 最笨的办法是 按路径找到 -ip 的文件夹，然后删除 翻墙后pip还是很慢（文不对题等搬家）虚拟机翻墙，常见翻墙方式有VPN和shadowsocks如果你的翻墙方式是shadowsocks 在宿主机windows上运行shadowsocks.exe(当然clash也可以)并勾选“允许局域网连接”（ALLOW LAN ， LAN就是局域网的意思） 使用桥接方式运行虚拟机（这时虚拟机与宿主处于同一个局域网）进入linux系统，System Settings – Network – Network proxy勾选Manual（手动）,地址全部填宿主机IP（局域网网段），设置好代理端口（可在windows下的shadowsocks查看，一般为默认1080） linux 用浏览器访问www.google.com，成功shell 翻墙方法一：（推荐使用） 为什么说这个方法推荐使用呢？因为他只作用于当前终端中，不会影响环境，而且命令比较简单在终端中直接运行： 1export http_proxy=http://proxyAddress:port 如果你是SSR,并且走的http的代理端口是12333，想执行wget或者curl来下载国外的东西，可以使用如下命令： 1export http_proxy=http://127.0.0.1:12333 如果是https那么就经过如下命令： 1export https_proxy=http://127.0.0.1:12333 除此之外的方法请参考https://zhuanlan.zhihu.com/p/46973701 python3转python2在python包3to2文件下（若conda则XXX\\anaconda\\Scripts） 1234# 若转换文件 python 3to2 -w /YOURPATH.py# 若转换文件夹 python 3to2 -w /YOURPATH/123 python常见bug\\转义字符12SyntaxError: (unicode error) &#x27;unicodeescape&#x27; codec can&#x27;t decode bytes in position 2-3:truncated \\UX 路径中的\\ 是转义字符 考虑换成 \\ 装饰器https://www.runoob.com/w3cnote/python-func-decorators.html Tips 对于这样一个函数，定义时 而调用时 思考一下为什么 读取/修改 EXIF通常通过手机或相机拍摄的图片中隐藏了照片的属性信息和拍摄数据，主要通过EXIF(Exchangeable image file format: 可交换图像文件格式) 进行存储这部分信息 安装 1pip install exif 教程 https://exif.readthedocs.io/en/latest/usage.html 有个小问题这样编码后输出的图片打不开 1status, image_tif_coded = cv2.imencode(&#x27;.tiff&#x27;, image) 1status, image_tif_coded = cv2.imencode(&#x27;.tif&#x27;, image) OS 的妙用修改文件的修改时间（windows） 123456# 获取 修改时间 m(modify)create_time = os.path.getmtime(str(sys.argv[1]))# 获取 创建时间 c(create)create_time = os.path.getctime(str(sys.argv[1]))# 更改 修改日期(创建日期改不了)os.utime(str(sys.argv[1]), (create_time, create_time)) # 时间 createtime的格式 类似time.time()","categories":[{"name":"python","slug":"python","permalink":"http://blog.hyaline.top/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://blog.hyaline.top/tags/python/"},{"name":"anaconda","slug":"anaconda","permalink":"http://blog.hyaline.top/tags/anaconda/"},{"name":"pycharm","slug":"pycharm","permalink":"http://blog.hyaline.top/tags/pycharm/"}]},{"title":"Sublime Text的使用心得","slug":"Sublime-Text的使用心得","date":"2021-09-19T02:17:36.000Z","updated":"2021-10-11T06:26:08.783Z","comments":true,"path":"2021/09/19/Sublime-Text的使用心得/","link":"","permalink":"http://blog.hyaline.top/2021/09/19/Sublime-Text%E7%9A%84%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/","excerpt":"","text":"Command panel默认为 Ctrl + Shift + P ， 与Picgo 上传快捷键相同，注意取消picgo的快捷键或更换快捷键 自动换行view-&gt;word wrap 视图——&gt;自动换行 中文不像中文 在Setting中添加 1&quot;font_options&quot;: [&quot;gdi&quot;],//解决中文不像中文的问题","categories":[],"tags":[]},{"title":"ali云服务器使用心得","slug":"ali云服务器使用心得","date":"2021-09-05T15:23:02.000Z","updated":"2021-09-05T15:25:05.736Z","comments":true,"path":"2021/09/05/ali云服务器使用心得/","link":"","permalink":"http://blog.hyaline.top/2021/09/05/ali%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/","excerpt":"","text":"docker pull的慢 试试阿里云官方加速 https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors","categories":[],"tags":[]},{"title":"vue学习","slug":"vue学习","date":"2021-08-21T16:49:06.000Z","updated":"2021-08-21T16:49:06.593Z","comments":true,"path":"2021/08/22/vue学习/","link":"","permalink":"http://blog.hyaline.top/2021/08/22/vue%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"http调试","slug":"http调试","date":"2021-08-20T14:52:22.000Z","updated":"2021-08-21T16:53:28.885Z","comments":true,"path":"2021/08/20/http调试/","link":"","permalink":"http://blog.hyaline.top/2021/08/20/http%E8%B0%83%E8%AF%95/","excerpt":"","text":"调试常用工具postman：https://www.postman.com/downloads/ 调试常识pythonhttp服务代码：https://gitee.com/wangdaochuan/school-spider/blob/master/server_test.py 注：python 自带的HTTP服务器不推荐用于生产， 常用框架：Django、Tornado、Flask、Twisted。 mysqlUnread result found https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursorbuffered.html ` 是 MySQL 的转义符，避免和 mysql 的本身的关键字冲突，只要你不在列名、表名中使用 mysql 的保留字或中文，就不需要转义。","categories":[],"tags":[]},{"title":"mysql常用命令","slug":"mysql常用命令","date":"2021-08-19T04:06:53.000Z","updated":"2021-08-21T16:52:17.907Z","comments":true,"path":"2021/08/19/mysql常用命令/","link":"","permalink":"http://blog.hyaline.top/2021/08/19/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"mysql 常用命令1234567891011121314151617181920# 创建数据表create database 名字;drop database 名字;show databases;#创建 tableCREATE TABLE `user_info` ( `id_num` int(11) NOT NULL AUTO_INCREMENT, `student_id` varchar(11) NOT NULL, `name` varchar(14) NOT NULL, `tel` varchar(11) NOT NULL, `gender` enum(&#x27;M&#x27;,&#x27;F&#x27;) NOT NULL, PRIMARY KEY (`id_num`)) ENGINE=InnoDB#找数据（ ` 在mysql中是专业字符的的意思，这里option是mysql的关键字所以必须要加``，当然其他（如student_id）也可以加，但是非必要）SELECT student_id, `option`, date_time,name FROM check_in_record WHERE name= wanghao; mysql python接口 官方文档MySQL :: MySQL Connector/Python Developer Guide","categories":[],"tags":[]},{"title":"linux 解压缩","slug":"linux-解压缩","date":"2021-08-13T15:24:06.000Z","updated":"2021-10-17T02:17:04.222Z","comments":true,"path":"2021/08/13/linux-解压缩/","link":"","permalink":"http://blog.hyaline.top/2021/08/13/linux-%E8%A7%A3%E5%8E%8B%E7%BC%A9/","excerpt":"","text":"尝试一下 tar -h","categories":[],"tags":[]},{"title":"git 技巧","slug":"git-技巧","date":"2021-08-09T13:36:21.000Z","updated":"2021-08-21T13:30:44.747Z","comments":true,"path":"2021/08/09/git-技巧/","link":"","permalink":"http://blog.hyaline.top/2021/08/09/git-%E6%8A%80%E5%B7%A7/","excerpt":"","text":"git 权威书籍 Pro GitPro Git（中文版） (oschina.net) fatal: refusing to merge unrelated histories你可能会在git pull或者git push中都有可能会遇到，这是因为两个分支没有取得关系。添加 –allow-unrelated-histories 参数即可 基本指令用户信息配置1234# 配置名字git config --global user.name &quot;你的名字&quot;# 配置邮箱git config --global user.email &quot;你的邮箱&quot; 这里的名字和邮箱只是作为提交变更时的用户信息，甚至可以是假的。 常用命令1234567git initgit add .git commit -m &quot;本次提交的注释&quot;git remote add origin 地址 #这里origin只是个远端的名字，会影响下一句git push origin master # 这里origin来源于上一句git pull origin mastergit remote -v # 查看远程仓库 不想每次输入密码123ssh-keygen # 生成SSH公钥# Linux 下cat ~/.ssh/id_rsa.pub #查看公钥，公钥默认位置在.ssh中 然后将公钥添加在 gitee 或github设置中","categories":[{"name":"git","slug":"git","permalink":"http://blog.hyaline.top/categories/git/"}],"tags":[{"name":"git 命令","slug":"git-命令","permalink":"http://blog.hyaline.top/tags/git-%E5%91%BD%E4%BB%A4/"}]},{"title":"焊接指南","slug":"焊接指南","date":"2021-08-08T05:14:41.000Z","updated":"2021-08-09T09:56:18.735Z","comments":true,"path":"2021/08/08/焊接指南/","link":"","permalink":"http://blog.hyaline.top/2021/08/08/%E7%84%8A%E6%8E%A5%E6%8C%87%E5%8D%97/","excerpt":"","text":"芯片正方向ASIC芯片 二极管 焊盘绘制QFN对于QFN这种引脚不外露的封装，焊盘在绘制时一定要长，这样会极大提高手动焊接的成功率","categories":[{"name":"硬件","slug":"硬件","permalink":"http://blog.hyaline.top/categories/%E7%A1%AC%E4%BB%B6/"}],"tags":[{"name":"焊接","slug":"焊接","permalink":"http://blog.hyaline.top/tags/%E7%84%8A%E6%8E%A5/"},{"name":"Altium Designer","slug":"Altium-Designer","permalink":"http://blog.hyaline.top/tags/Altium-Designer/"}]},{"title":"happy up net","slug":"happy-up-net","date":"2021-08-06T05:57:15.000Z","updated":"2021-10-30T02:45:44.259Z","comments":true,"path":"2021/08/06/happy-up-net/","link":"","permalink":"http://blog.hyaline.top/2021/08/06/happy-up-net/","excerpt":"","text":"快乐源泉glados，还没试 lantern，每个月的免费流量还是挺香的 xlinkworld,目前在用的，很好用，教程比较全 xlinkworld介绍价格 如图所示，我用的是月付的，每月其实也就能用10个G左右 如何使用https://www.zeasay.com/ xlinkworld的教程比较详细，当然有一定几率图片刷不出来，这个时候免费的梯子就有用了 资料网站https://www.doulos.com/ 一部分收费但总有一些好玩的","categories":[],"tags":[{"name":"happy","slug":"happy","permalink":"http://blog.hyaline.top/tags/happy/"}]},{"title":"算法基础","slug":"算法基础","date":"2021-08-05T14:47:30.000Z","updated":"2021-08-06T05:57:20.571Z","comments":true,"path":"2021/08/05/算法基础/","link":"","permalink":"http://blog.hyaline.top/2021/08/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/","excerpt":"","text":"程序 = 数据结构+代码 时间复杂度O(1) 1print(&quot;hello world&quot;) 12print(&quot;hello world&quot;)print(&quot;hello world&quot;) O(n) 12for i in range: print(&quot;hello world&quot;) O(n^2) 123for i in range: for j in range: print(&quot;hello world&quot;) O(log2 n ) 123while n&gt;1: print(n) n=n/2 空间复杂度O（1） O（n） O（mn）","categories":[],"tags":[]},{"title":"hexo自动化","slug":"hexo自动化","date":"2021-08-05T07:40:00.000Z","updated":"2021-10-17T02:13:21.918Z","comments":true,"path":"2021/08/05/hexo自动化/","link":"","permalink":"http://blog.hyaline.top/2021/08/05/hexo%E8%87%AA%E5%8A%A8%E5%8C%96/","excerpt":"","text":"脚本文件的编写与使用windows环境bat文件常用命令1234567891011121314@REM 注释“@REM”，或”::“@REM 输出echo 你好，hexo@REM 设置变量 /p 是等待用户输入的意思 flag后面千万不要加空格！！！！set /p flag=@REM 使用变量echo %flag%@REM if 语句if /i %flag% == y (echo &quot;y&quot;)^else (echo &quot;stop the procedure!&quot;) 读取txt123for /f &quot;delims=&quot; %%i in (blog_pwd.txt) do (echo %%i) 参考https://baike.baidu.com/item/bat/365230?fr=aladdin 使用 bat 进行自动化将博客路径存储在 blog_pwd.txt中 new post 新建文章123456789101112@echo offfor /f &quot;delims=&quot; %%i in (blog_pwd.txt) do (@REM echo %%iset pwd_= %%i)echo blog categories: %pwd_%cd %pwd_%echo please enter new post name:set /p post_name=hexo new &quot;%post_name%&quot; open server 打开本地服务器12345678910111213141516@echo off@REM 采用UTF-8编码chcp 65001for /f &quot;delims=&quot; %%i in (blog_pwd.txt) do (@REM echo %%iset pwd_= %%i)echo blog categories: %pwd_%cd %pwd_%echo 启动服务器hexo s@REM 似乎hexo 的命令执行完之后会自动退出，只好放一起了echo 上传完成pause deployment 部署1234567891011121314151617@echo off@REM 采用UTF-8编码chcp 65001for /f &quot;delims=&quot; %%i in (blog_pwd.txt) do (@REM echo %%iset pwd_= %%i)echo blog categories: %pwd_%cd %pwd_%echo 开始上传hexo d -g@REM 似乎hexo 的命令执行完之后会自动退出，只好放一起了echo 上传完成pause 使用UTools自动化 博客部署uTools - 你的生产力工具集 实现效果实现效果如下图所示，在任意位置按鼠标中键，即可快速进行hexo 常用操作（新建文章，本地预览，部署） 教程核心是使用 uTools中的 快捷命令插件和偏好设置中的超级面板功能，可以先尝试在超级面板的关键字中添加快捷命令来通过鼠标中键快速呼出快捷命令的编写界面 编写界面如下所示 点击右下角的**+**号即可添加快捷命令 快捷命令配置 批处理代码新建文章123456789101112131415161718@echo off@REM 采用UTF-8编码chcp 65001@REM 选择blog所在分区set disk=D:%disk%@REM pwd_ 填自己的 hexo 博客目录set pwd=D:\\Project_center\\hexo_learning\\1echo blog categories: %pwd%cd %pwd%echo 输入新文章的名字:set /p post_name=hexo new &quot;%post_name%&quot; &amp;&amp; exitecho 新建完成exit 输出设置 图标文件 博客部署1234567891011121314151617181920@echo off@REM 采用UTF-8编码chcp 65001@REM 选择blog所在分区set disk=D:%disk%@REM pwd_ 填自己的 hexo 博客目录set pwd=D:\\Project_center\\hexo_learning\\1echo blog categories: %pwd%cd %pwd%echo 开始上传hexo g -d &amp;&amp;echo 上传完成@REM 似乎hexo 的命令执行完之后会自动退出，只好放一起了echo 上传失败pause 输出设置 图标文件 本地预览12345678910111213141516@echo off@REM 采用UTF-8编码chcp 65001@REM 选择blog所在分区set disk=D:%disk%@REM pwd_ 填自己的 hexo 博客目录set pwd=D:\\Project_center\\hexo_learning\\1echo blog categories: %pwd%cd %pwd%echo 启动服务器hexo s@REM 似乎hexo 的命令执行完之后会自动退出，只好放一起了 输出设置 图标文件 将bat转换为exeBat To Exe Converter ，可以将bat文件转为exe 链接：https://pan.baidu.com/s/1qWa_2IcX1AW5odL2czTb8A提取码：0zdh–来自百度网盘超级会员V4的分享 选择隐形应用程序可以不显示CMD的框 在版本信息里可以选择图标文件，格式应为ico，这里有一个在线转换网页(http://www.ico51.cn/)。 具体的使用就自己摸索吧","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://blog.hyaline.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.hyaline.top/tags/hexo/"},{"name":"hexo技巧","slug":"hexo技巧","permalink":"http://blog.hyaline.top/tags/hexo%E6%8A%80%E5%B7%A7/"}]},{"title":"vs code 添加右键菜单","slug":"vs-code-添加右键菜单","date":"2021-08-05T06:02:13.000Z","updated":"2021-10-21T02:10:50.620Z","comments":true,"path":"2021/08/05/vs-code-添加右键菜单/","link":"","permalink":"http://blog.hyaline.top/2021/08/05/vs-code-%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/","excerpt":"","text":"vs code 添加右键菜单任意位置新建一个reg文件，可以命名为1.reg（注意不要搞成1.reg.txt） 123456789101112131415161718192021222324252627Windows Registry Editor Version 5.00; 桌面右键添加[HKEY_CLASSES_ROOT\\*\\shell\\VSCode]@=&quot;Open with Code&quot;&quot;Icon&quot;=&quot;D:\\\\NEW_software\\\\Microsoft VS Code\\\\Microsoft VS Code\\\\Code.exe&quot;[HKEY_CLASSES_ROOT\\*\\shell\\VSCode\\command]@=&quot;\\&quot;D:\\\\NEW_software\\\\Microsoft VS Code\\\\Microsoft VS Code\\\\Code.exe\\&quot; \\&quot;%1\\&quot;&quot;Windows Registry Editor Version 5.00; 文件右键添加[HKEY_CLASSES_ROOT\\Directory\\shell\\VSCode]@=&quot;Open with Code&quot;&quot;Icon&quot;=&quot;D:\\\\NEW_software\\\\Microsoft VS Code\\\\Microsoft VS Code\\\\Code.exe&quot;[HKEY_CLASSES_ROOT\\Directory\\shell\\VSCode\\command]@=&quot;\\&quot;D:\\\\NEW_software\\\\Microsoft VS Code\\\\Microsoft VS Code\\\\Code.exe\\&quot; \\&quot;%V\\&quot;&quot;Windows Registry Editor Version 5.00; 文件夹背景位置右键添加[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\VSCode]@=&quot;Open with Code&quot;&quot;Icon&quot;=&quot;D:\\\\NEW_software\\\\Microsoft VS Code\\\\Microsoft VS Code\\\\Code.exe&quot;[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\VSCode\\command]@=&quot;\\&quot;D:\\\\NEW_software\\\\Microsoft VS Code\\\\Microsoft VS Code\\\\Code.exe\\&quot; \\&quot;%V\\&quot;&quot; 之后保存退出，运行此文件即可","categories":[{"name":"windows技巧","slug":"windows技巧","permalink":"http://blog.hyaline.top/categories/windows%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"vs code","slug":"vs-code","permalink":"http://blog.hyaline.top/tags/vs-code/"},{"name":"添加右键菜单","slug":"添加右键菜单","permalink":"http://blog.hyaline.top/tags/%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"}]},{"title":"hexo 必备知识","slug":"hexo-必备知识","date":"2021-08-03T15:07:53.000Z","updated":"2021-08-23T06:42:04.548Z","comments":true,"path":"2021/08/03/hexo-必备知识/","link":"","permalink":"http://blog.hyaline.top/2021/08/03/hexo-%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/","excerpt":"","text":"hexo 官网hexo官网文档是比较全的，而且有中文版，比较友好，https://hexo.io/zh-cn/docs/index.html ，而且有中文的入门视频，但是在youtube上，可能观看不是很方便，下面的是B站的版本，和YouTube上一样 hexo 入门视频一个UP主的视频，一共七讲可以快速入门一下 hexo必备命令1234hexo ghexo dhexo shexo clean 详细看：https://hexo.io/docs/commands.html npm下载太慢，试试淘宝镜像1npm config set registry https://registry.npm.taobao.org 参考网址：https://segmentfault.com/a/1190000027083723 pure主题搭建这是我用的主题，主要考虑到简洁，方便查看 参考：https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md 图床搭建网站上的图片需要有一个网络地址，一般都会选择图床，图床有各式各样的，下面推荐一种picgo+typora+gitee的方式，实现图片自动上传，全平台（win，mac，linux）可用 参考图床搭建教程 如何引用博客内文章在文章内添加如下代码 1&#123;% post_link 文章名 %&#125; 或者 1&#123;% post_link 文章名 Hello %&#125; 参考：https://www.jianshu.com/p/92f56767b67b 更换域名后无法加载图片在source中新建CNAME文件（没有后缀），文件中添加自己的域名 如何添加 B站视频12345&#123;% raw %&#125;&lt;div style=&quot;position:relative; padding-bottom:75%; width:100%; height:0&quot;&gt; &lt;iframe src=&quot;//player.bilibili.com/player.html?aid=36553965&amp;bvid=BV1At411y7gh&amp;cid=64187443&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; style=&quot;position:absolute; height: 100%; width: 100%;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&#123;% endraw%&#125; 参考 Hexo博客中加入B站视频播放器 (baidu.com) (68条消息) 如何在Hugo/Hexo博客中插入响应式Bilibili视频代码块_知识星海-CSDN博客 hexo 自动化参考hexo自动化","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://blog.hyaline.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.hyaline.top/tags/hexo/"},{"name":"hexo技巧","slug":"hexo技巧","permalink":"http://blog.hyaline.top/tags/hexo%E6%8A%80%E5%B7%A7/"}]},{"title":"typora+picGo+gitee = 好用的markdown","slug":"typora-picGo-gitee-好用的markdown","date":"2021-08-03T15:06:17.000Z","updated":"2021-09-19T09:54:32.661Z","comments":true,"path":"2021/08/03/typora-picGo-gitee-好用的markdown/","link":"","permalink":"http://blog.hyaline.top/2021/08/03/typora-picGo-gitee-%E5%A5%BD%E7%94%A8%E7%9A%84markdown/","excerpt":"","text":"准备—–软件下载及安装下面提供软件官网或github地址，和百度云地址，方便大家下载，请优先选择官网 typora—–MD编辑器Typora是一款优雅的markdown编辑器，mac，win，linux均可用。 官网—— https://www.typora.io/ 百度云—— 链接：https://pan.baidu.com/s/1btVW8sH99DGlP7F6KZnvLQ提取码：hy8m picgo—–图片上传PicGo实现自动上传图片并返回markdown格式的图片url，这是自动上传的，也就是在Typora中插入图片就自动帮你上传替换图片的url，对于我们用户是透明的，十分舒服，也是mac，win，linux均可用。目前已有正式版。 官网—— https://github.com/Molunerfinn/PicGo/releases 百度云—— 链接：https://pan.baidu.com/s/1xmB6j6YtycNGbdrwbdqHSA提取码：3ja5 gitee——图床Gitee是国内版的Github，功能跟Github基本一样，主要是在国内访问非常快，作为图床和笔记文件存放仓库非常合适。只不过超过1M的部分无法直接查看，当然作为参考一个完整1080P屏幕的截图大小为175k左右，对于只是存截图的话够用了。如果大量图片大于1M请换其他平台 Node.js在gicgo中下载gitee插件时会用到，不安装无法使用picgo，不过如果是为了hexo，那应该已经有了（使用hexo需要node.js），同样是全平台可用 链接：https://pan.baidu.com/s/1WmBXZmJNW5FLIIbZtQNcQg提取码：rqkb 安装安装十分简单，要注意的是picgo的路径一会用的到 配置步骤在 gitee 上创建一个仓库来当图床1.注册 gitee 账号并创建一个仓库当图床，这里仓库名起了img（我用的是img-save），注意一定勾选Readme初始化 2.生成私人令牌 进入设置，如下图，（生成的令牌注意保存） （注：令牌只会显示一次，如果不复制的话，就只能重新修改令牌，步骤：修改 –&gt; 重新生成令牌） Picgo的配置 打开picgo（可能打开后没看到界面，看看右下角有没有picgo图标），之后如下所示安装插件，有两个，安装第一个 安装完之后 点击图床设置-&gt; gitee图床进行对应配置： 要填的内容含义如下所示 我这里在在根目录下专门建了一个文件夹（img）用来存图片 因此我的设置如下所示 最后注意设置一下时间戳重命名，不然遇到相同的图片名会很尴尬（上传失败） typora配置 在typora中点击 文件-&gt;偏好设置 ,进行如下图所示设置完成后注意验证能否上传 上传过程和上传成功后会有提示 此时你的typora就可以自动上传了 可能遇到的问题上传成功后无法预览图片码云要求图片大于1M时需要登陆查看，看看能不能压缩一下图片质量，或者裁剪一下 明明很小的图却很大体积可能是后期添加的文字的影响，将添加完文字的图片重新截图即可 所有配置都对了，就是无法上传 端口问题 typora 默认使用36677端口，但是你的picgo可能并不是这个端口而是37780之类的，需要将picgo端口设置成36677方可，方法 在配置文件(70行左右)，更改port为36677 12345&quot;server&quot;: &#123; &quot;port&quot;: 36677, //typora 默认调用36677端口 &quot;host&quot;: &quot;127.0.0.1&quot;, &quot;enable&quot;: true&#125;,","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://blog.hyaline.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"picgo","slug":"picgo","permalink":"http://blog.hyaline.top/tags/picgo/"},{"name":"typora","slug":"typora","permalink":"http://blog.hyaline.top/tags/typora/"}]},{"title":"树莓派基础","slug":"树莓派基础","date":"2021-08-03T14:57:10.000Z","updated":"2021-08-03T15:02:43.152Z","comments":true,"path":"2021/08/03/树莓派基础/","link":"","permalink":"http://blog.hyaline.top/2021/08/03/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E7%A1%80/","excerpt":"","text":"树莓派基础查看系统位数 1file /lib/systemd/systemd 安装deb 1dpkg -i ****.deb 自启动文件 1/etc/rc.local docker 上跑mysqlhttps://www.cnblogs.com/zhaopei/p/11736135.html#autoid-2-0 退出bash（bash 是shell 的一种）ctrl+d 123456# virtualenvapt install virthualenvvirtualenv --no-site-packages venv #创建一个没有任何包的环境virtualenv -p /usr/bin/python3.7 envsource venv/bin/activate #进入环境 mysql varvhar 和 char ： varchar 是边长只需规定最大长度；（0-65535） char 是定长；（0-255）会补空格 table 名不能全是数字","categories":[{"name":"ubuntu 安装","slug":"ubuntu-安装","permalink":"http://blog.hyaline.top/categories/ubuntu-%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.hyaline.top/tags/linux/"}]},{"title":"electron-ssr 踩坑","slug":"electron-ssr-踩坑","date":"2021-08-03T09:48:33.000Z","updated":"2021-08-05T05:40:44.980Z","comments":true,"path":"2021/08/03/electron-ssr-踩坑/","link":"","permalink":"http://blog.hyaline.top/2021/08/03/electron-ssr-%E8%B8%A9%E5%9D%91/","excerpt":"","text":"electron-ssr安装环境 ubuntu18.04， 正常安装出现了各式各样的bug 正常的安装流程https://github.com/qingshuisiyuan/electron-ssr-backup/blob/master/Ubuntu.md 出现问题不要慌，看下面 遇到的问题python装不上有些 apt install 命令在是无法执行的 在18.04下默认安装了Python 3.6.8，所以是没有python命令的 可以选择安装python 如sudo apt install python但是我这里提示 1234下列软件包有未满足的依赖关系： python : 预依赖: python-minimal (= 2.7.15~rc1-1) 但是它将不会被安装 依赖: python2.7 (&gt;= 2.7.15~rc1-1~) 但是它将不会被安装E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。 尝试了各种安装方式无效，包括sudo apt purge libpython2* 结果设置打不开了，无奈重装了系统apt install aptitude 也不能解决依赖问题，甚至可能导致原有的程序出错最后添加软连接解决，文章在https://www.cnblogs.com/geekHao/p/12635970.html我第一种方法失败，第二种方法成功了 缺少 libcrypto12021-08-02 20:37:10:132 [error] 2021-08-02 20:37:10 INFO util.py:85 loading libcrypto from libcrypto.so.1.1 sudo apt install libcrypto 提示 1E: 无法定位软件包 libcrypto 看来没有尝试pip3 install crypto安装完但是没用这个网址也试了https://www.gitmemory.com/issue/qingshuisiyuan/electron-ssr-backup/26/520281383最后通过https://github.com/qingshuisiyuan/electron-ssr-backup/blob/master/Ubuntu.md中的可选依赖：sudo apt-get install libsodium-dev成功当然另一句 sudo apt-get install libssl-dev也无法安装我没有管，好像没有影响ssr 总结如果出现了以上问题最好还是重装系统吧，系统可能已经不正常了，否则这些bug可能只是开始 最后垃圾百度，Bing yyds","categories":[{"name":"ubuntu 安装","slug":"ubuntu-安装","permalink":"http://blog.hyaline.top/categories/ubuntu-%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"ssr","slug":"ssr","permalink":"http://blog.hyaline.top/tags/ssr/"},{"name":"linux","slug":"linux","permalink":"http://blog.hyaline.top/tags/linux/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-08-02T16:00:16.010Z","updated":"2021-08-04T15:48:35.993Z","comments":true,"path":"2021/08/03/hello-world/","link":"","permalink":"http://blog.hyaline.top/2021/08/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://blog.hyaline.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.hyaline.top/tags/hexo/"},{"name":"hexo技巧","slug":"hexo技巧","permalink":"http://blog.hyaline.top/tags/hexo%E6%8A%80%E5%B7%A7/"}]}],"categories":[{"name":"FPGA","slug":"FPGA","permalink":"http://blog.hyaline.top/categories/FPGA/"},{"name":"好用的工具","slug":"好用的工具","permalink":"http://blog.hyaline.top/categories/%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/"},{"name":"python","slug":"python","permalink":"http://blog.hyaline.top/categories/python/"},{"name":"git","slug":"git","permalink":"http://blog.hyaline.top/categories/git/"},{"name":"硬件","slug":"硬件","permalink":"http://blog.hyaline.top/categories/%E7%A1%AC%E4%BB%B6/"},{"name":"博客搭建","slug":"博客搭建","permalink":"http://blog.hyaline.top/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"windows技巧","slug":"windows技巧","permalink":"http://blog.hyaline.top/categories/windows%E6%8A%80%E5%B7%A7/"},{"name":"ubuntu 安装","slug":"ubuntu-安装","permalink":"http://blog.hyaline.top/categories/ubuntu-%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"k-Map(卡诺图)","slug":"k-Map-卡诺图","permalink":"http://blog.hyaline.top/tags/k-Map-%E5%8D%A1%E8%AF%BA%E5%9B%BE/"},{"name":"linux","slug":"linux","permalink":"http://blog.hyaline.top/tags/linux/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://blog.hyaline.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"备份","slug":"备份","permalink":"http://blog.hyaline.top/tags/%E5%A4%87%E4%BB%BD/"},{"name":"再生龙","slug":"再生龙","permalink":"http://blog.hyaline.top/tags/%E5%86%8D%E7%94%9F%E9%BE%99/"},{"name":"python","slug":"python","permalink":"http://blog.hyaline.top/tags/python/"},{"name":"anaconda","slug":"anaconda","permalink":"http://blog.hyaline.top/tags/anaconda/"},{"name":"pycharm","slug":"pycharm","permalink":"http://blog.hyaline.top/tags/pycharm/"},{"name":"git 命令","slug":"git-命令","permalink":"http://blog.hyaline.top/tags/git-%E5%91%BD%E4%BB%A4/"},{"name":"焊接","slug":"焊接","permalink":"http://blog.hyaline.top/tags/%E7%84%8A%E6%8E%A5/"},{"name":"Altium Designer","slug":"Altium-Designer","permalink":"http://blog.hyaline.top/tags/Altium-Designer/"},{"name":"happy","slug":"happy","permalink":"http://blog.hyaline.top/tags/happy/"},{"name":"hexo","slug":"hexo","permalink":"http://blog.hyaline.top/tags/hexo/"},{"name":"hexo技巧","slug":"hexo技巧","permalink":"http://blog.hyaline.top/tags/hexo%E6%8A%80%E5%B7%A7/"},{"name":"vs code","slug":"vs-code","permalink":"http://blog.hyaline.top/tags/vs-code/"},{"name":"添加右键菜单","slug":"添加右键菜单","permalink":"http://blog.hyaline.top/tags/%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"},{"name":"picgo","slug":"picgo","permalink":"http://blog.hyaline.top/tags/picgo/"},{"name":"typora","slug":"typora","permalink":"http://blog.hyaline.top/tags/typora/"},{"name":"ssr","slug":"ssr","permalink":"http://blog.hyaline.top/tags/ssr/"}]}